package com.ceva.base.common.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.ResourceBundle;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;

import com.ceva.base.common.bean.CevaCommonMenuBean;
import com.ceva.base.common.dto.RequestDTO;
import com.ceva.base.common.dto.ResponseDTO;
import com.ceva.base.common.utils.CevaCommonConstants;
import com.ceva.base.common.utils.DBConnector;
import com.ceva.security.PasswordValidation;
import com.ceva.user.security.UserLocking;
import com.ceva.user.security.UserLockingClient;
import com.ceva.user.security.UserLockingProcess;
import com.ceva.util.CommonUtil;
import com.ceva.util.DBUtils;

public class CommonLoginDAO {

	private Logger logger = Logger.getLogger(CommonLoginDAO.class);
	private ResponseDTO responseDTO = null;
	private JSONObject requestJSON;
	private JSONObject menuJSON = null;

	HashMap<String, Object> menuMap = null;

	private String userid;
	private String password;
	private String userGroup;
	private String applName;
	private String loginEntity;
	private String userLevel;
	private String location;
	private String loginTime;
	private String pidMenuQuery = null;
	private String randomVal = null;
	private String remoteIp = null;
	private String dbPassword = null;
	private String systemStatus = null;
	private String USLIDN = null;
	boolean isAuthUser = false;
	private String authRequired = null;
	private ResourceBundle rb = null;

	public ResponseDTO validatLogin(RequestDTO requestDTO) {

		logger.debug("Inside ValidateLogin... ");
		Connection connection = null;

		PreparedStatement preparedStatement = null;

		CallableStatement callableStatement = null;

		ResultSet resultSet = null;

		String userStatus = null;
		String lockTime = null;
		String validateSystem = "";
		String validateAppl = "";
		String useresultSetystemStatusQry = "";
		String token = "";
		String authValue = "";
		String userdetails = "";
		String updateStatus = "";
		String userData = "";
		String validateQry = "";
		String validatePwdExpQry = "";
		String passQry = "";
		String userLockProc = "";
		String userGrpQry = "";
		String sessionId= "";

		int wrongPwdCnt = 0;
		int status = 0;
		int applCnt = 0;
		int sysCnt = 0;

		rb = ResourceBundle.getBundle("pathinfo_config");
		try {
			authRequired = rb.getString("AUTH_REQUIRED");
		} catch (Exception e) {
			logger.debug("AuthRequired not configured in property file.. By default setting to 'NO'");
			authRequired = "NO";
		}
		logger.debug("AuthRequired [" + authRequired + "]");

		try {

			menuJSON = new JSONObject();
			responseDTO = new ResponseDTO();

			requestJSON = requestDTO.getRequestJSON();
			logger.debug("Request JSON [" + requestJSON + "]");

			userid = requestJSON.getString(CevaCommonConstants.USER_ID);
			password = requestJSON.getString(CevaCommonConstants.PASSWORD);
			applName = requestJSON.getString(CevaCommonConstants.APPL_NAME);
			randomVal = requestJSON.getString(CevaCommonConstants.RANDOM_VAL);
			remoteIp = requestJSON.getString("REMOTE_IP");
			sessionId= requestJSON.getString("SESSION_ID");

			if (userid == null) {
				responseDTO.addError("Invalid User Id.");
			} else if (password == null) {
				responseDTO.addError("Invalid Password.");
			} else if (authRequired == null) {
				responseDTO.addError("User Authentication Not Configured.");
			} else {

				connection = DBConnector.getConnection();
				logger.debug("Connection is [" + connection + "]");

				if (connection == null) {
					throw new SQLException(
							"DB Connection is null, please check the network configurations.");
				}

				validateAppl = "select count(*) "
						+ "from USER_LOGIN_CREDENTIALS "
						+ "where LOGIN_USER_ID=? and APPL_CODE=?";

				preparedStatement = connection.prepareStatement(validateAppl);
				preparedStatement.setString(1, userid);
				preparedStatement.setString(2, applName);
				resultSet = preparedStatement.executeQuery();

				if (resultSet.next()) {
					applCnt = resultSet.getInt(1);
				}

				logger.debug("User Login Count Check [" + applCnt + "]");

				preparedStatement.close();
				resultSet.close();

				if (applCnt == 1) {
					if (authRequired.equals("YES")) {
						validateSystem = "Select count(*) "
								+ "from USER_LOCKING_INFO where USER_ID=?";

						preparedStatement = connection
								.prepareStatement(validateSystem);
						preparedStatement.setString(1, userid);
						resultSet = preparedStatement.executeQuery();
						if (resultSet.next()) {
							sysCnt = resultSet.getInt(1);
						}
						logger.debug("SysCnt for USER_LOCKING_INFO is ["
								+ sysCnt + "]");

						DBUtils.closePreparedStatement(preparedStatement);
						DBUtils.closeResultSet(resultSet);
						if (sysCnt == 1) {
							useresultSetystemStatusQry = "Select STATUS,ULSID,USER_DATA from USER_LOCKING_INFO where USER_ID=?";
							preparedStatement = connection
									.prepareStatement(useresultSetystemStatusQry);
							preparedStatement.setString(1, userid);
							resultSet = preparedStatement.executeQuery();

							if (resultSet.next()) {
								systemStatus = resultSet.getString(1);
								USLIDN = resultSet.getString(2);
								userData = resultSet.getString(3);
							}
							DBUtils.closePreparedStatement(preparedStatement);
							DBUtils.closeResultSet(resultSet);

							logger.debug("SystemStatus [" + systemStatus
									+ "] USLIDN [" + USLIDN + "]");
							token = UserLocking.getRandomValue();

							if (systemStatus.equals("W")) {
								authValue = UserLockingProcess.regiterReq(
										USLIDN, userid, token);
								logger.debug("authValue - " + authValue);

								try {
									userdetails = UserLockingClient
											.callLockingServer(remoteIp, 7777,
													authValue);
									logger.debug("userdetails - " + userdetails);
									isAuthUser = UserLockingProcess
											.processRegistration(userid,
													userdetails, token, USLIDN);

								} catch (Exception e) {
									logger.debug("Handled Exception while fetching user-data ::: "
											+ e.getMessage());
								}

								logger.debug("Is data valid Data in W State  - "
										+ isAuthUser);
								if (isAuthUser) {
									updateStatus = "update USER_LOCKING_INFO set STATUS=? where USER_ID=?";
									preparedStatement = connection
											.prepareStatement(updateStatus);
									preparedStatement.setString(1, "R");
									preparedStatement.setString(2, userid);
									int updCnt = preparedStatement
											.executeUpdate();
									if (updCnt == 1) {
										logger.debug("Status Updated to R");
									}

									DBUtils.closePreparedStatement(preparedStatement);
								}
							}
							if (systemStatus.equals("R")) {
								authValue = userData;
								logger.debug("R authValue - " + authValue);
								userData = UserLockingProcess.validateReq(
										userid, authValue, token);
								logger.debug("R userData - " + userData);
								userdetails = UserLockingClient
										.callLockingServer(remoteIp, 7777,
												userData);
								logger.debug("R userdetails - " + userdetails);
								isAuthUser = UserLockingProcess.isValidUser(
										userid, userdetails, token, authValue);
								logger.debug("R isAuthUser - " + isAuthUser);
							}

							if (isAuthUser) {
								logger.debug("User Authentication Success");
							} else {
								responseDTO
										.addError("Locking System Authetication failed.");
							}
						} else {
							responseDTO
									.addError("Please Register for User Locking System.");
						}
					}
					// common part for auth and non-auth
					if (isAuthUser || authRequired.equals("NO")) {
						try {
							validateQry = "select PASSWORD from USER_LOGIN_CREDENTIALS where LOGIN_USER_ID=?";
							preparedStatement = connection
									.prepareStatement(validateQry);
							preparedStatement.setString(1, userid);
							resultSet = preparedStatement.executeQuery();
							if (resultSet.next()) {
								dbPassword = resultSet.getString(1);
							}
							logger.debug("DBPassword [" + dbPassword + "]");

							dbPassword = dbPassword.concat(randomVal);
							logger.debug("After adding random value dbPassword ["
									+ dbPassword + "]");
							dbPassword = CommonUtil.b64_sha256(dbPassword);
							logger.debug("After adding random value encrpted password dbPassword ["
									+ dbPassword + "]");
							DBUtils.closePreparedStatement(preparedStatement);
							DBUtils.closeResultSet(resultSet);

							// If Password equals
							if (dbPassword.equals(password)) {

								userGrpQry = "select USER_GROUPS,USER_STATUS,ENTITY,USER_LEVEL,(select NVL(office_name,' ') "
										+ "from CEVA_BRANCH_MASTER where OFFICE_CODE=UI.LOCATION),"
										+ "to_char(ULC.USER_LAST_LOGIN,'DD-MON-YYYY HH24:MI:SS'),"
										+ "to_char(ULC.USER_LOCK_TIME,'DD-MON-YYYY HH24:MI:SS') "
										+ "from USER_INFORMATION UI,USER_LOGIN_CREDENTIALS ULC "
										+ "where UI.COMMON_ID=ULC.COMMON_ID and ULC.LOGIN_USER_ID=?";
								preparedStatement = connection
										.prepareStatement(userGrpQry);
								preparedStatement.setString(1, userid);
								resultSet = preparedStatement.executeQuery();

								if (resultSet.next()) {
									userGroup = resultSet.getString(1);
									userStatus = resultSet.getString(2);
									loginEntity = resultSet.getString(3);
									userLevel = resultSet.getString(4);
									location = resultSet.getString(5);
									loginTime = resultSet.getString(6);
									lockTime = resultSet.getString(7);
								}

								DBUtils.closePreparedStatement(preparedStatement);
								DBUtils.closeResultSet(resultSet);

								logger.debug("lockTime [" + lockTime
										+ "] User Group [" + userGroup
										+ "] LoginEntity[" + loginEntity + "]");

								if (userGroup == null) {
									responseDTO.addError("Rights not assigned");
								} else {
									menuMap = new HashMap<String, Object>();
									if (lockTime != null
											&& userStatus.equals("L")) {

										status = PasswordActivate(userid,
												userStatus, "VALID");
										
										
										
										logger.debug("Status from PasswordActivate ["
												+ status + "]");

										userStatus = (status == 1 ? userStatus = "A"
												: "");

									}

									if (userStatus.equals("A")) {
										int PwdExpCnt = 0;
										preparedStatement.close();
										resultSet.close();

										validatePwdExpQry = "select to_number(abs(LAST_PASSWD_CHANGE - sysdate)) from "
												+ "USER_LOGIN_CREDENTIALS "
												+ "where LOGIN_USER_ID=?";
										preparedStatement = connection
												.prepareStatement(validatePwdExpQry);
										preparedStatement.setString(1, userid);
										resultSet = preparedStatement
												.executeQuery();

										if (resultSet.next()) {
											PwdExpCnt = resultSet.getInt(1);
										}

										DBUtils.closePreparedStatement(preparedStatement);
										DBUtils.closeResultSet(resultSet);

										
										logger.debug(" PwdExpCnt [" + PwdExpCnt
												+ "]");

										if (PwdExpCnt > 60) {
											userStatus = "F";
											menuMap.put("userStatus",
													userStatus);
										} else {
											logger.debug("Inside Else For Getting Menus..");
											menuJSON = getMenuData();
											menuMap.put(
													CevaCommonConstants.MENU_DATA,
													menuJSON);
											menuMap.put("userid", userid);
											menuMap.put("userStatus",
													userStatus);
											menuMap.put("LoginEntity",
													loginEntity);
											menuMap.put("UserLevel", userLevel);
											menuMap.put("Location", location);
											menuMap.put("links_pid_query",
													pidMenuQuery);
											menuMap.put("LoginTime", loginTime);
											menuMap.put("userGroup", userGroup);

											PasswordActivate(userid,
													userStatus, "UPDATECNT");
											
											updateLastLogin(userid,sessionId);

										}
									} else if (userStatus.equals("F")) {
										menuMap.put("userStatus", userStatus);
									} else if (userStatus.equals("N")) {
										responseDTO
												.addError("User Authorization not done.");
									} else if (userStatus.equals("L")) {
										if (status == -2) {
											responseDTO
													.addError("Please wait until 30 minutes for Re-activate Your Login.");
										} else {
											responseDTO
													.addError("User Blocked for 30 minutes.");
										}
									} else {
										responseDTO
												.addError("User Got Deactivated, Please activate in order to process the login.");
									}
									responseDTO.setData(menuMap);
								}

							} else {
								DBUtils.closePreparedStatement(preparedStatement);
								DBUtils.closeResultSet(resultSet);

								passQry = "select ULC.USER_LOCK_TIME,UI.USER_STATUS "
										+ "from USER_LOGIN_CREDENTIALS ULC,USER_INFORMATION UI "
										+ "where UI.COMMON_ID=ULC.COMMON_ID and ULC.LOGIN_USER_ID=?";
								preparedStatement = connection
										.prepareStatement(passQry);
								preparedStatement.setString(1, userid);
								resultSet = preparedStatement.executeQuery();

								if (resultSet.next()) {
									lockTime = resultSet.getString(1);
									userStatus = resultSet.getString(2);
								}

								logger.debug("lockTime [" + lockTime
										+ "] userStatus [" + userStatus + "]");

								if (lockTime != null && userStatus.equals("L")) {
									status = PasswordActivate(userid,
											userStatus, "INVALID");
									logger.debug("The User Status is ["
											+ status + "]");
									if (status == -2) {
										responseDTO
												.addError("Please wait until 30 minits for Re-activate Your Login.");
									} else if (status == -1) {
										responseDTO
												.addError("Invalid User Id / Password.");
									}
								} else {
									userLockProc = "{call UserLockingProc(?,?)}";
									callableStatement = connection
											.prepareCall(userLockProc);
									callableStatement.setString(1, userid);
									callableStatement.registerOutParameter(2,
											java.sql.Types.INTEGER);
									callableStatement.executeUpdate();
									wrongPwdCnt = callableStatement.getInt(2);
									logger.debug("Invalid Password Count wrongPwdCnt ["
											+ wrongPwdCnt + "]");
									if (wrongPwdCnt >= 6) {
										logger.debug("DbPassword ["
												+ dbPassword + "]");
										responseDTO
												.addError("User Account Blocked For 30 Minits. Please try with correct User Id and Password.");
									} else {
										logger.debug("DbPassword ["
												+ dbPassword + "]");
										responseDTO
												.addError("Invalid User Id / Password.");
									}
									DBUtils.closeCallableStatement(callableStatement);								}
							}
						} catch (Exception e) {
							responseDTO
									.addError("Internal Error Occured At Login.Please re-check and try again.");
							e.printStackTrace();
						}
					} else {
						responseDTO
								.addError("User Authentication not configured.");

					}

				} else {
					responseDTO.addError("User Doesn't belongs to " + applName
							+ " .Please re-check and try again.");
				}
			}
		} catch (SQLException e2) {
			responseDTO.addError("Unable to connect to DB.");
			logger.debug("DB connection is null, please check the network configurations. Excpetion is ["
					+ e2.getMessage() + "]");
			e2.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
			logger.debug("Internal Error Occured. the exception is ["
					+ e.getMessage() + "]");
			responseDTO
					.addError("Internal Error Occured.Please re-check and try again.");
			e.printStackTrace();
		} finally {

			DBUtils.closePreparedStatement(preparedStatement);
			DBUtils.closeResultSet(resultSet);
			DBUtils.closeCallableStatement(callableStatement);
			DBUtils.closeConnection(connection);

			menuJSON = null;
			userStatus = null;
			lockTime = null;
			validateSystem = null;
			validateAppl = null;
			userStatus = null;
			validateSystem = null;
			validateAppl = null;
			useresultSetystemStatusQry = null;
			token = null;
			authValue = null;
			userdetails = null;
			updateStatus = null;
			userData = null;
			validateQry = null;
			validatePwdExpQry = null;
			passQry = null;
			userLockProc = null;

		}
		return responseDTO;
	}

	
	private void updateLastLogin(String userid, String sessionId) {
		  PreparedStatement pstmt = null;
		  Connection con = null;
		  ResultSet rs = null;
		  try {
		   if (con == null)
		    con = DBConnector.getConnection();
		  
		   pstmt = con
		     .prepareStatement("UPDATE USER_LOGIN_CREDENTIALS SET SESSION_ID=? WHERE LOGIN_USER_ID=?");
		   pstmt.setString(1, sessionId);
		   pstmt.setString(2, userid);
		   pstmt.executeUpdate();
		   pstmt.close();
		   con.commit();
		  } catch (Exception ex) {
		   logger.debug("error while updating..:" + ex.getLocalizedMessage());
		  } finally {
		   DBUtils.closeResultSet(rs);
		   DBUtils.closePreparedStatement(pstmt);
		   DBUtils.closeConnection(con);
		  }
		 }
	
	public static int PasswordActivate(String userId, String userStatus,
			String flag) {
		Connection conn = null;
		CallableStatement callableStatement = null;
		int status = 0;

		try {
			conn = DBConnector.getConnection();

			String userLockProc = "{call UserLockingCheckingProc(?,?,?,?)}";
			callableStatement = conn.prepareCall(userLockProc);
			callableStatement.setString(1, userId);
			callableStatement.setString(2, userStatus);
			callableStatement.setString(3, flag);
			callableStatement.registerOutParameter(4, java.sql.Types.INTEGER);
			callableStatement.executeUpdate();
			status = callableStatement.getInt(4);
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtils.closeCallableStatement(callableStatement);
			DBUtils.closeConnection(conn);
		}
		return status;
	}

	public JSONObject getMenuData() throws Exception {
		JSONObject jres = null;
		HashMap<String, Object> map = null;
		List<CevaCommonMenuBean> menuAl = null;

		CevaCommonMenuBean menuBean = null;
		String menuQry = null;

		int count = 0;
		String toPrepStmt = null;

		PreparedStatement menuStmt = null;
		ResultSet menuRS = null;

		Connection connection = null;

		try {
			jres = new JSONObject();
			map = new HashMap<String, Object>();
			menuAl = new ArrayList<CevaCommonMenuBean>();

			logger.debug("UserGroup [" + userGroup + "] ApplName[" + applName
					+ "] Userid [" + userid + "]");

			menuQry = "select count(*) from user_linked_action where upper(user_id)=?";
			connection = DBConnector.getConnection();

			menuStmt = connection.prepareStatement(menuQry);
			menuStmt.setString(1, userid.toUpperCase());
			menuRS = menuStmt.executeQuery();

			if (menuRS.next()) {
				count = menuRS.getInt(1);
			}

			logger.debug("The Query count is [" + count + "]");

			if (count == 0) {
				menuQry = "Select distinct ULA.ID,ULA.NAME,ULA.PID,(select action from USER_ACTION_LINKS where UPPER(NAME)=UPPER(ULA.NAME)),'Y','"
						+ applName
						+ "',ULA.title "
						+ "from USER_LINKED_ACTION ULA  where UPPER(ULA.GROUP_ID)=?  and  ULA.ID in (select distinct id from USER_ACTION_LINKS where alias_name is null  )   "
						+ "and ULA.USER_ID is null order by to_number(ULA.ID) ";
				toPrepStmt = userGroup.toUpperCase();
			} else {
				menuQry = "Select distinct ULA.ID,ULA.NAME,ULA.PID,"
						+ "(select action from USER_ACTION_LINKS where UPPER(NAME)=UPPER(ULA.NAME)),'Y','"
						+ applName
						+ "',ULA.title "
						+ "from USER_LINKED_ACTION ULA  where UPPER(ULA.USER_ID)=?  and  "
						+ "ULA.ID in (select distinct id from USER_ACTION_LINKS where alias_name is null  ) "
						+ " order by to_number(ULA.ID) ";
				toPrepStmt = userid.toUpperCase();
			}

			logger.debug("After setting the query is  [" + menuQry + "] ");

			DBUtils.closePreparedStatement(menuStmt);
			DBUtils.closeResultSet(menuRS);
			
			menuStmt = connection.prepareStatement(menuQry);
			menuStmt.setString(1, toPrepStmt);

			menuRS = menuStmt.executeQuery();
			logger.debug("After getting data from result set [" + menuRS + "]");

			while (menuRS.next()) {
				menuBean = new CevaCommonMenuBean();
				menuBean.setId(menuRS.getInt(1));
				menuBean.setMenuName(menuRS.getString(2));
				menuBean.setParentMenu(menuRS.getString(3));
				menuBean.setMenuaction(menuRS.getString(4));
				menuBean.setActionstatus(menuRS.getString(5));
				menuBean.setApplName(menuRS.getString(6));
				menuBean.setTitle(menuRS.getString(7));
				menuAl.add(menuBean);
				menuBean = null;
			}
			map.put("menudata", menuAl);

			DBUtils.closePreparedStatement(menuStmt);
			DBUtils.closeResultSet(menuRS);
			
			
			menuQry = "select count(*) from user_linked_action where upper(user_id)=?";

			menuStmt = connection.prepareStatement(menuQry);
			menuStmt.setString(1, userid.toUpperCase());
			menuRS = menuStmt.executeQuery();

			if (menuRS.next()) {
				count = menuRS.getInt(1);
			}

			logger.debug("Count for checking links [" + count + "]");

			if (count > 0) {
				pidMenuQuery = "select (select alias_name from USER_ACTION_LINKS where name=ula.NAME),ula.CHECKED "
						+ "from user_linked_action ula "
						+ "where upper(ula.pid)=? and upper(ula.user_id)=?";
			} else {
				pidMenuQuery = "select (select alias_name from USER_ACTION_LINKS where name=ula.NAME),ula.CHECKED from user_linked_action ula  "
						+ "where ula.pid=? and upper(ula.group_id) in (select upper(user_groups) from  user_information where "
						+ "common_id in (select common_id from user_login_credentials where  upper(login_user_id)= ?)) and ula.user_id is null";

			}

			logger.debug("Inside  finally map [ " + map + "]");

			jres.putAll(map);
			DBUtils.closePreparedStatement(menuStmt);
			DBUtils.closeResultSet(menuRS);
		} catch (Exception e) {
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
			logger.debug("GetMenuData got Exception [" + e.getMessage() + "]");
			jres.putAll(new HashMap<String, List<CevaCommonMenuBean>>());
		}

		finally {
			DBUtils.closeResultSet(menuRS);
			DBUtils.closePreparedStatement(menuStmt);
			DBUtils.closeConnection(connection);

			map.clear();
			map = null;
			menuAl = null;
			menuBean = null;
			menuQry = null;
			toPrepStmt = null;
		}
		logger.debug("Result MenuJSON object from JRES[" + jres + "]");
		return jres;
	}

	public ResponseDTO changePassword(RequestDTO requestDTO) {

		HashMap<String, String> passwordMap = null;

		String userId = null;
		String password = null;
		String applName = null;

		String oldPasswordCheckQry = null;
		String prevPassword = null;
		String oldPasswordVal = null;

		CallableStatement callableStatement = null;
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		String repeatPwdStatus = null;

		String resetPwdProc = "{call changePasswordProc(?,?,?,?,?,?)}";
		try {

			responseDTO = new ResponseDTO();
			requestJSON = requestDTO.getRequestJSON();

			userId = requestJSON.getString(CevaCommonConstants.USER_ID);
			password = requestJSON.getString(CevaCommonConstants.PASSWORD);
			applName = requestJSON.getString(CevaCommonConstants.APPL_NAME);

			oldPasswordCheckQry = "SELECT PASSWORD,OLD_PASSWORDS from USER_LOGIN_CREDENTIALS where LOGIN_USER_ID=?";

			connection = DBConnector.getConnection();
			logger.debug("Connection is  [" + connection + "]");

			pstmt = connection.prepareStatement(oldPasswordCheckQry);
			pstmt.setString(1, userId);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				prevPassword = rs.getString(1);
				oldPasswordVal = rs.getString(2);
			}

			logger.debug("Old Password Val [" + oldPasswordVal
					+ "]  Prev Password [" + prevPassword + "]");

			passwordMap = (HashMap<String, String>) PasswordValidation
					.maxCheck(password, prevPassword, oldPasswordVal);
			repeatPwdStatus = passwordMap.get("RESPCODE");
			logger.debug("RepeatPwdStatus [" + repeatPwdStatus + "]");

			if (repeatPwdStatus.equals("00")) {
				oldPasswordVal = passwordMap.get("OLDPWDS");
				callableStatement = connection.prepareCall(resetPwdProc);
				callableStatement.setString(1, userId);
				callableStatement.setString(2, password);
				callableStatement.setString(3, applName);
				callableStatement.setString(4, prevPassword);
				callableStatement.setString(5, oldPasswordVal);
				callableStatement.registerOutParameter(6,
						java.sql.Types.INTEGER);
				callableStatement.executeUpdate();
				int resCnt = callableStatement.getInt(6);
				if (resCnt == 1) {
					responseDTO
							.addMessages("Password Changed Successfully Completed. ");
				} else if (resCnt == -1) {
					responseDTO
							.addError("User Id Doen't Belongs to Current Admin. ");
				} else {
					responseDTO
							.addError("There is an issue in Reset Password ");
				}
			} else {
				responseDTO
						.addError("New Password should not be equal to one of the last 5 passwords. ");
			}

		} catch (SQLException e) {
			logger.debug("SQLException in changePassword [" + e.getMessage()
					+ "]");
			responseDTO
					.addError("Internal Error Occured At Change Password.Please re-check and try again.");
		} catch (Exception e) {
			logger.debug("Exception in changePassword  [" + e.getMessage()
					+ "]");
			responseDTO.addError("Internal Error Occured While Executing.");
		} finally {
			DBUtils.closeCallableStatement(callableStatement);
			DBUtils.closePreparedStatement(pstmt);
			DBUtils.closeResultSet(rs);
			DBUtils.closeConnection(connection);
			passwordMap = null;

			userId = null;
			password = null;
			applName = null;

			oldPasswordCheckQry = null;
			prevPassword = null;
			oldPasswordVal = null;

			repeatPwdStatus = null;

			resetPwdProc = null;
		}

		return responseDTO;
	}
}
